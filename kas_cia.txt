Čia sudėtos visos naujausios programos, dirbančios su VU algoritmais, po to, kai buvo pakeista Zive talpykla.
Darbas pradėtas 2022 03 24.

Visos programos saugomos github.com VU_APRIL projekte (kesju/Raktas135)

Bendra schema:
 
1.	Duomenys atsisiunčiami iš Zive ir įrašomi į aplanką buffer:
 
buffer:
xxxxxxx.xxx
xxxxxxx.xxx.json
..................
..................
..................
xxxxxxx.xxx
xxxxxxx.xxx.json
 
2.	0_zive_collect_list_v2.ipynb perrašo iš buffer  aplanko į aplanką records įrašus, kurie nėra aplanke records, sudaro įrašų ir jų atributų sąrašą formatu list.json, list.csv:
 
records:
xxxxxxx.xxx
xxxxxxx.xxx.json
..................
..................
..................
xxxxxxx.xxx
xxxxxxx.xxx.json
list.json
list.csv
 
 
3.	1_zive_select_records_v2.ipynb atrenka pagal užduotą algoritmą įrašus  klasifikatorių mokymui ir vertinimui  ir perrašo juos į aplanką records_selected, sudaro atrinktų įrašų ir jų atributų sąrašą formatu list.json:
 
records_selected:
xxxxxxx.xxx
xxxxxxx.xxx.json
..................
..................
..................
xxxxxxx.xxx
xxxxxxx.xxx.json
list.json
list.csv
 
4.	2_zive_analiz_list_v2.ipynb išveda iš list.json sąrašą patogesnėje formoje, su anotacijų pasiskirstymu per įrašus ir pacientus. Galima naudoti tiek aplanke records, tiek aplanke records_selected
 
 
5.	3_zive_creat_npy_v2.ipynb, panaudodama 0_zive_select_records_v2.ipynb  suformuotą aplanke records_selected sąrašą list.json,  sukuria naujus failų vardus SubjCode, kuriuose kartu su failo pavadinimu file_name užšifruotas paciento kodas userNr, taip pat sukuriamas transliatoriaus failas df_transl.csv originalaus paciento kodo userID atkūrimui. Visi failai perpavadinami naujais vardais ir perrašomi į aplanką records_npy, keičiant duomenų formatą į numpy. Failų json turinys išlieka tas pats. Suformuojamas informacinis failas info_create_z.json su su SubjCode sąrašu bei failų sąrašas list.json, abu jie įrašomi į diską.
 
records_npy:
xxxx.xxxxxxx.xxx.npy
xxxx.xxxxxxx.xxx.json
.................................
................................
................................
xxxx.xxxxxxx.xxx.npy
xxxx.xxxxxxx.xxx.json
df_transl.csv
info_create_z.json
list.json
 
 
6.	4_zive_creat_beats_attrib_v2.ipynb - sukuria all_beats_attr, suformuoja label, RRl, RRr. Naudoja list.json, info_create_z.json
 
records_npy:
xxxx.xxxxxxx.xxx.npy
xxxx.xxxxxxx.xxx.json
.................................
................................
................................
xxxx.xxxxxxx.xxx.npy
xxxx.xxxxxxx.xxx.json
df_transl.csv
info_create_z.json
list.json
all_beats_attr.csv
 


Bandymų medžiagai parengti buvo panaudotas skriptas convert_file_name.ipynb, kurio pagalba ankstesni failai su failu vardais,
kurie buvo recordingID buvo paversti į failus su vardais file_name.

Bandymams skirti 2 skriptai:
5_zive_accuracy_cnn_vu_v1_test.ipynb
5_zive_accuracy_cnn_vu_v2_test.ipynb

5_zive_accuracy_cnn_vu_v1_test.ipynb- šitas variantas yra atsarginis, kad įsitikinti, kad klasifikacija dirba taip pat, kaip ir su 
# originaliais įrašais, nepaverstais į npy formatą ir naudojant failų vardams SubjCode. Tačiau labiau naudotinas variantas
5_zive_accuracy_cnn_vu_v2_test.ipynb, nes npy formatu dirba ir VU komanda.

Abu variantai turi galimybę išvesti ekstrasistolių vietas įraše, kurias galima toliau stebėti zive EKG grafiniame vaizde. 
Dirbant su daug įrašų reiktų užblokuoti: classification = []  # Užblokuota
 
